name: Build and release
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
env:
  DEBIAN_FRONTEND: noninteractive
jobs:
  luacheck:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install additional packages
        run: |
          set -ex
          sudo apt -qy update
          sudo apt -qy install --no-install-recommends lua-check
      - name: Run luacheck
        run: find */src/ -type f -name '*.lua' -follow -exec luacheck {} +
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install TeX Live
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages: |
            l3build
      - name: Run tests
        run: |
          l3build check
  doc:
    name: Typeset documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install additional packages
        run: |
          set -ex
          sudo apt -qy update
          sudo apt -qy install --no-install-recommends parallel
      - name: Install TeX Live
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages: |
            scheme-basic
          package-file: |
            **/DEPENDS.txt
      - name: Typeset documentation
        run: |
          set -ex
          for MODULE in */
          do
            export TEXMFHOME="$PWD"/"$MODULE"texmf
            find "$MODULE"doc/ -type f -name '*.tex' -follow |
            parallel --halt now,fail=1 -- latexmk -r "$MODULE"texmf/doc/luatex/expltools/latexmkrc -cd
          done
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: '*/doc/**/*.pdf'
      - name: Create a prerelease
        if: github.ref == 'refs/heads/main'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: The latest version
          automatic_release_tag: latest
          prerelease: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          files: '*/doc/**/*.pdf'
